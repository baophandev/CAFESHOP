/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package caitiemcafe;

import java.security.SecureRandom;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author GIA BAO
 */
public class PanelAccount extends javax.swing.JPanel {

    /**
     * Creates new form PanelAccount
     */
    public PanelAccount() {
        initComponents();
        table.setModel(model);
        loadDatatoTable();
        disableColumn(0);
    }

    private void disableColumn(int columnIndex) {
        TableColumnModel columnModel = table.getColumnModel();
        TableColumn column = columnModel.getColumn(columnIndex);
        column.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        btnNew.setText("+New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnXoa.setText("Delete");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addComponent(btnXoa)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnSave)
                    .addComponent(btnXoa)
                    .addComponent(btnUpdate))
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        Object[] rowData = {
            "Được tạo tự động",
            ""
        };

        model.addRow(rowData);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) { // Kiểm tra xem có hàng nào được chọn không
            String ID = generateRandomString(4);
            String Ho_Va_Ten = model.getValueAt(selectedRow, 1) != null ? model.getValueAt(selectedRow, 1).toString() : "";
            String Gioi_Tinh = model.getValueAt(selectedRow, 2) != null && "Nam".equals(model.getValueAt(selectedRow, 2).toString()) ? "1" : "0";
            String SDT = model.getValueAt(selectedRow, 3) != null ? model.getValueAt(selectedRow, 3).toString() : "";
            String USERNAME = model.getValueAt(selectedRow, 4) != null ? model.getValueAt(selectedRow, 4).toString() : "";
            String PASSWORD = model.getValueAt(selectedRow, 5) != null ? model.getValueAt(selectedRow, 5).toString() : "";

            // Kiểm tra điều kiện trước khi lưu dữ liệu
            if (Ho_Va_Ten.isEmpty() || SDT.isEmpty() || USERNAME.isEmpty() || PASSWORD.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            } else if (isUsernameExists(USERNAME)) {
                JOptionPane.showMessageDialog(this, "USERNAME đã tồn tại! Vui lòng chọn một USERNAME khác.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            } else {
                saveData(Ho_Va_Ten, Gioi_Tinh, ID, SDT, USERNAME, PASSWORD);
                loadDatatoTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để lưu dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    //Random 1 mã bất kỳ có số và chữ
    private String generateRandomString(int length) {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        StringBuilder randomString = new StringBuilder(length);

        SecureRandom secureRandom = new SecureRandom();

        for (int i = 0; i < length; i++) {
            int randomIndex = secureRandom.nextInt(characters.length());
            randomString.append(characters.charAt(randomIndex));
        }

        return randomString.toString();
    }


    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) { // Kiểm tra xem có hàng nào được chọn không
            int dialogResult = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa dữ liệu không?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

            if (dialogResult == JOptionPane.YES_OPTION) {
                String ma = model.getValueAt(selectedRow, 0).toString();
                deleteData(ma);
                loadDatatoTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để xóa dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) { // Kiểm tra xem có hàng nào được chọn không
            String ID = model.getValueAt(selectedRow, 0) != null ? model.getValueAt(selectedRow, 0).toString() : "";
            String Ho_Va_Ten = model.getValueAt(selectedRow, 1) != null ? model.getValueAt(selectedRow, 1).toString() : "";
            String Gioi_Tinh = model.getValueAt(selectedRow, 2) != null && "Nam".equals(model.getValueAt(selectedRow, 2).toString()) ? "1" : "0";
            String SDT = model.getValueAt(selectedRow, 3) != null ? model.getValueAt(selectedRow, 3).toString() : "";
            String USERNAME = model.getValueAt(selectedRow, 4) != null ? model.getValueAt(selectedRow, 4).toString() : "";
            String PASSWORD = model.getValueAt(selectedRow, 5) != null ? model.getValueAt(selectedRow, 5).toString() : "";

            // Kiểm tra điều kiện trước khi lưu dữ liệu
            if (Ho_Va_Ten.isEmpty() || SDT.isEmpty() || USERNAME.isEmpty() || PASSWORD.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            } else {
                updateData(Ho_Va_Ten, Gioi_Tinh, ID, SDT, USERNAME, PASSWORD);
                loadDatatoTable();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để lưu dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }

        loadDatatoTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void updateData(String Ho_Va_Ten, String Gioi_Tinh, String ID, String SDT, String USERNAME, String PASSWORD) {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String dbUrl = "jdbc:sqlserver://LAPTOP-1QVPM352\\MSSQLEXPRESS:1433;databaseName=CAFEACCOUNT;user=sa;password=sa2023";
            Connection con = DriverManager.getConnection(dbUrl);
            Statement s = con.createStatement();
            String query = "UPDATE DATA_ACCOUNT SET Ho_Va_Ten = ' " + Ho_Va_Ten + "', Gioi_Tinh = '" + Gioi_Tinh + "', SDT = '" + SDT + "', USERNAME = '" + USERNAME + "', PASSWORD = '" + PASSWORD + "' WHERE ID = '" + ID + "';";
            s.executeUpdate(query);

            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi lưu dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void deleteData(String ID) {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String dbUrl = "jdbc:sqlserver://LAPTOP-1QVPM352\\MSSQLEXPRESS:1433;databaseName=CAFEACCOUNT;user=sa;password=sa2023";
            Connection con = DriverManager.getConnection(dbUrl);
            Statement s = con.createStatement();
            String query = "DELETE FROM DATA_ACCOUNT WHERE ID = '" + ID + "'";
            s.executeUpdate(query);

            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi xóa dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void saveData(String Ho_Va_Ten, String Gioi_Tinh, String ID, String SDT, String USERNAME, String PASSWORD) {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String dbUrl = "jdbc:sqlserver://LAPTOP-1QVPM352\\MSSQLEXPRESS:1433;databaseName=CAFEACCOUNT;user=sa;password=sa2023";
            Connection con = DriverManager.getConnection(dbUrl);
            Statement s = con.createStatement();

            String query = "INSERT INTO DATA_ACCOUNT VALUES ('" + Ho_Va_Ten + "', '" + Gioi_Tinh + "', '" + ID + "', '" + SDT + "', '" + USERNAME + "', '" + PASSWORD + "')";
            s.executeUpdate(query);

            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi lưu dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadDatatoTable() {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String dbUrl = "jdbc:sqlserver://LAPTOP-1QVPM352\\MSSQLEXPRESS:1433;databaseName=CAFEACCOUNT;user=sa;password=sa2023";
            Connection con = DriverManager.getConnection(dbUrl);
            Statement s = con.createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM DATA_ACCOUNT");

            model.setRowCount(0);
            while (rs.next()) {
                if ("1".equals(rs.getString("Gioi_Tinh"))) {
                    Object[] rowData = {
                        rs.getString("ID"),
                        rs.getString("Ho_Va_Ten"),
                        "Nam",
                        rs.getString("SDT"),
                        rs.getString("USERNAME"),
                        rs.getString("PASSWORD")
                    };

                    model.addRow(rowData);
                } else {
                    Object[] rowData = {
                        rs.getString("ID"),
                        rs.getString("Ho_Va_Ten"),
                        "Nữ",
                        rs.getString("SDT"),
                        rs.getString("USERNAME"),
                        rs.getString("PASSWORD")
                    };

                    model.addRow(rowData);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private boolean isUsernameExists(String username) {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String dbUrl = "jdbc:sqlserver://LAPTOP-1QVPM352\\MSSQLEXPRESS:1433;databaseName=CAFEACCOUNT;user=sa;password=sa2023";
            Connection con = DriverManager.getConnection(dbUrl);
            Statement s = con.createStatement();

            // Kiểm tra xem USERNAME đã tồn tại trong CSDL chưa
            String query = "SELECT COUNT(*) FROM DATA_ACCOUNT WHERE USERNAME = '" + username + "'";
            ResultSet rs = s.executeQuery(query);
            rs.next();
            int count = rs.getInt(1);

            con.close();

            // Trả về true nếu USERNAME đã tồn tại, ngược lại trả về false
            return count > 0;
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi kiểm tra USERNAME!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    // Tạo một lớp mô hình bảng tùy chỉnh
    public class NonEditableTableModel extends DefaultTableModel {

        private final boolean[] editableColumns;  // Mảng boolean để lưu trạng thái chỉnh sửa của từng cột

        // Hàm tạo của lớp với tham số truyền vào dữ liệu, tên cột và trạng thái chỉnh sửa của cột
        public NonEditableTableModel(Object[][] data, Object[] columnNames, boolean[] editableColumns) {
            // Gọi hàm tạo của lớp cha (DefaultTableModel) để khởi tạo mô hình bảng
            super(data, columnNames);
            // Sao chép mảng editableColumns để tránh ảnh hưởng của thay đổi từ bên ngoài
            this.editableColumns = editableColumns.clone();
        }

        // Ghi đè phương thức isCellEditable để kiểm soát khả năng chỉnh sửa của từng ô
        @Override
        public boolean isCellEditable(int row, int column) {
            // Trả về giá trị từ mảng editableColumns tương ứng với cột hiện tại
            return editableColumns[column];
        }
    }

    // Mảng boolean để xác định trạng thái chỉnh sửa của từng cột
    boolean[] editableColumns = {false, true, true, true, true, true}; // Đặt true cho các cột có thể chỉnh sửa
    // Sử dụng lớp NonEditableTableModel thay vì DefaultTableModel
    NonEditableTableModel model = new NonEditableTableModel(new Object[][]{}, new String[]{"ID", "Ho_Va_Ten", "Giới tính (Nam/Nữ)", "SDT", "Username", "Password"}, editableColumns);


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnXoa;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
